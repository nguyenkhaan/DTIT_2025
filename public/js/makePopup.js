import modalHeading from "./Component/modalHeading.js";
import modalQuestion from "./Component/modalQuestion.js";
import questionChoiceList from "./Component/questionChoiceList.js";
import { colorClass } from "./public.js";
const modal = document.querySelector('.app__modal');
const modalWrapper = document.querySelector('.modal__wrapper')
import changeTurn from "./turnAndScore.js";
import { updateInfoTeam } from "./turnAndScore.js";
import modalQuestionAnsHTMLMaker from "./answerShow.js";

/* Dark theme code 
import hljs from 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/es/highlight.min.js';
import cpp from 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/es/languages/cpp.min.js';*/
import hljs from 'https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.9.0/build/es/highlight.min.js';
import cpp from 'https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.9.0/build/es/languages/cpp.min.js';
const canvas = document.querySelector('#confetti');
const jsConfetti = new JSConfetti();
const bar = document.getElementById('time-bar');
const showAnswerButton = document.querySelector('.show--answer'); 
const answerBox = document.querySelector('.question__box__answer'); 
let flagFirstTurn = 0
let flagTimer = 0;  
let timeoutId = null; // Bi·∫øn to√†n c·ª•c ho·∫∑c ƒë∆∞·ª£c d√πng chung ƒë·ªÉ qu·∫£n l√Ω h·ªßy timeout

function startTimer(delay) {
    const duration = delay;
    let timeLeft = duration;
    function updateBar() {
        const percent = timeLeft / duration;
        bar.style.transform = `scaleX(${percent})`;

        if (timeLeft < 0) {
            modalWrapper.classList.add('end-time');
            return;
        }

        timeLeft--;
        timeoutId = setTimeout(updateBar, 1000); // G√°n v√†o bi·∫øn ƒë·ªÉ sau n√†y c√≤n h·ªßy ƒë∆∞·ª£c
    }

    updateBar();
}
function markTrueButton(button, currentColor) {
    button.onclick = null
    button.innerText = ''; 
    button.style.pointerEvents = "none"
    //X·ª≠ l√≠ m√†u cho ƒë·ªôi hi·ªán t·∫°i n·∫øu ƒë·ªôi ƒë√≥ ƒë√£ tr·∫£ l·ªùi ƒë√∫ng 
    switch (currentColor) {
        case 0: button.classList.add(colorClass[0]); button.innerHTML = '<i class="fa-brands fa-wolf-pack-battalion text-5xl"></i>';  break;
        case 1: button.classList.add(colorClass[1]); button.innerHTML = '<i class="fa-solid fa-dragon text-5xl"></i>'; break;
        case 2: button.classList.add(colorClass[2]); button.innerHTML = '<i class="fa-solid fa-worm text-5xl"></i>'; break;
        case 3: button.classList.add(colorClass[3]); button.innerHTML = '<i class="fa-solid fa-feather text-5xl"></i>'; break;
    }
}
function markFalseButton(button , currentColor) {
    button.onclick = null; 
    button.style.pointerEvents = 'none'; 
    button.innerText = ''; 
    button.classList.add('--gray'); 
    button.innerHTML = '<i class="fa-solid fa-skull text-5xl"></i>'; 
}
let currentTeam = undefined;
export default function makePopup(buttonID, header, content, args, idQuestion, scoreBonus) //Bo sung them hai tham so idQuestion va score 
{
    //console.log(buttonID); 
    //Ti√™u ƒë·ªÅ c√¢u h·ªèi: C√¢u hoi 1, c√¢u h·ªèi 2, c√¢u h·ªèi 3, c√¢u h·ªèi 4,... 
    if (!flagFirstTurn) {
        flagFirstTurn = 1
        currentTeam = changeTurn()
    }
    
    modal.classList.remove('--non-active');
    const modalHeader = document.querySelector('.modal__header');
    modalHeader.innerHTML = modalHeading(header , colorClass[currentTeam.teamID]);
    let currentColor = currentTeam.teamID; 
    //X·ª≠ l√≠ cho ph·∫ßn teamWinSelection 
    const teamWinSelection = document.querySelector('#select_team-win')
    teamWinSelection.value = currentTeam.teamID + 1 + ''; 
        teamWinSelection.onchange = function() {
        teamWinSelection.classList.remove('--red' , '--blue' , '--yellow' , '--green'); 
        const value = this.value; 
        switch (value) 
        {
            case '1': teamWinSelection.classList.add('--red'); currentColor = 0;  break;
            case '2': teamWinSelection.classList.add('--blue'); currentColor = 1; break;
            case '3': teamWinSelection.classList.add('--yellow'); currentColor = 2; break;
            case '4': teamWinSelection.classList.add('--green'); currentColor = 3; break;
        }
    }
    
    //X·ª≠ l√≠ n·ªôi dung c√¢u h·ªèi -> render n·ªôi dung c√¢u h·ªèi 
    const modalQues = document.querySelector('.modal__question__box');
    //modalQues.innerHTML = modalQuestionHTMLMaker(content)
    modalQues.innerHTML = content
    //highlight codes 
    hljs.registerLanguage('cpp', cpp);
    document.querySelectorAll('pre code').forEach((block) => {
        hljs.highlightElement(block);
    });
    //X·ª≠ l√≠ n·ªôi dung c√¢u tr·∫£ l·ªùi -> render c√¢u tr·∫£ l·ªùi  
    showAnswerButton.onclick = function() {
       
        answerBox.style.display = 'block'; 
        modalQuestionAnsHTMLMaker(args); 
    }
    //D·ª±a v√†o scoreBonus ƒë·ªÉ t√≠nh th·ªùi gian delay (s·∫Ω code sau)
    let delay;
    if (scoreBonus == 10) delay = 1 //C√¢u d·ªÖ
    if (scoreBonus == 20) delay = 2 //C√¢u trung b√¨nh 
    if (scoreBonus == 30) delay = 3 //C√¢u kh√≥ 
    document.onkeydown = function(e) {
        if (e.key === 'Enter') {
            if (!flagTimer) {
                startTimer(10); 
                flagTimer = 1; 
            } 
        }
    }
    // startTimer(10); 
    //ƒê·∫øm th·ªùi gian c√¢u h·ªèi 
    //X·ª≠ l√≠ c√¢u tr·∫£ l·ªùi l√† ƒë√∫ng hay sai v√† ghi v√†o log 
    const trueButton = document.querySelector('.--true-button');
    const falseButton = document.querySelector('.--false-button');
    trueButton.onclick = function () {
        //Th√™m hi·ªáu ·ª©ng ·∫•n v√†o button (maybe s·∫Ω code sau, c√°i n√†y hi·ªán ch∆∞a code)
        jsConfetti.addConfetti({
        emojis: ['üåû', 'üåà', '‚ú®', 'üòÑ', 'üåü', 'ü•∞', '‚òÄÔ∏è', 'üíñ', 'üéâ', 'ü¶ã', 'ü´∂', 'üòá', 'üí´'],
        })
         jsConfetti.addConfetti({
        emojis: ['üåà', '‚ö°Ô∏è', 'üí•', '‚ú®', 'üí´', 'üå∏' , 'üòÉ' , '‚òÅÔ∏è' , 'üí•'],
        }).then(() => jsConfetti.addConfetti()).then(() => jsConfetti.addConfetti()).then(() => jsConfetti.addConfetti()) 
        //T√¥ m√†u cho c√°i button ƒë√£ ƒë∆∞·ª£c nh·∫•n ·ªü ƒë√¢y 
        markTrueButton(buttonID, currentColor)
        // updateInfoTeam(trueButton, currentTeam, idQuestion, scoreBonus);
    }
    falseButton.onclick = function () {
        jsConfetti.addConfetti({
        emojis: ['üè≥Ô∏è', 'üíÄ' , 'üí¢'],
        })
        setTimeout(
            function() {
                 jsConfetti.addConfetti({
                    emojis : ['üè≥Ô∏è', 'üíÄ'], 

                })
                 jsConfetti.addConfetti({
                    emojis : ['üè≥Ô∏è' , 'üëø'], 

                })
                jsConfetti.addConfetti({
                    emojis :['üè≥Ô∏è', 'ü´†', 'üò°'], 

                })
                jsConfetti.addConfetti({
                emojis: ['üè≥Ô∏è', 'üíÄ' , 'üí¢'],
                })
            }, 550
            
        );     
        markFalseButton(buttonID , currentColor); 
        //updateInfoTeam(falseButton, currentTeam, idQuestion, 0);
        //Sau n√†y, mu·ªën c·∫≠ nh√¢t log story th√¨ h√£y m·ªü comment 2 d√≤ng l·ªánh n√†y ·ªü hai n√∫t true v√† false button 

    }
    //S·ª± bi·∫øn m·∫•t c·ªßa pop up 
    const closeIcon = document.querySelector('.modal__header i')
    closeIcon.onclick = () => {
        clearTimeout(timeoutId); // H·ªßy timeout hi·ªán t·∫°i
        modalWrapper.classList.remove('end-time')
        modal.classList.add('--non-active')
        const percent = '100%'
        bar.style.transform = `scaleX(${percent})`;   //Th·ª±c hi·ªán v·∫Ω l·∫°i th·ªùi gian ban ƒë·∫ßu cho d·ªìng h·ªì 
        currentTeam = changeTurn();
         answerBox.style.display = 'none'; 
        flagTimer = 0 
    }
}
//**
// Ch√∫ √Ω v·ªÅ s·ª± kh√°c nhau gi·ªØa addEventListener v√† onclick addEventListener th√¨ th√™m hi·ªáu ·ª©ng v√¥, ki·ªÉu n√≥ repeat, onclick th√¨ kh√¥ng
//  */